-- CoolKid Hub (merged) with Aim Assist (improved smoothing), restored original GUI size/style
-- Paste as a LocalScript (StarterPlayerScripts)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local VirtualUser = game:GetService("VirtualUser")
local Teams = game:GetService("Teams")

local player = Players.LocalPlayer
local mouse = player:GetMouse()
local camera = workspace.CurrentCamera

-- Feature state variables
local flying = false
local flyVelocity, flyGyro, flyConnection = nil, nil, nil
local speedMult = 1
local jumpMult = 1
local fullBright = false
local nightMode = false
local autoClicking = false
local infiniteJump = false
local noClip = false
local autoHeal = false
local infiniteStamina = false
local antiAfk = false

-- Aim assist variables (new)
local aimAssist = false            -- master toggle
local aimKey = Enum.UserInputType.MouseButton2 -- Right mouse button by default
local isAiming = false
local aimFOV = 150                 -- pixels radius
local aimSmoothing = 6.0           -- higher = slower smoothing; 0 for instant (float)
local aimMaxDistance = 2000        -- max world distance to consider target
local aimIgnoreTeam = true         -- ignore same-team players

local originalAmbient = Lighting.Ambient
local originalBrightness = Lighting.Brightness

-- ----------------------------
-- flying functions (unchanged)
-- ----------------------------
local function startFly()
    if flying then return end
    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    flying = true
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum then hum.PlatformStand = true end

    flyVelocity = Instance.new("BodyVelocity")
    flyVelocity.MaxForce = Vector3.new(1e9,1e9,1e9)
    flyVelocity.Velocity = Vector3.zero
    flyVelocity.P = 9e4
    flyVelocity.Parent = hrp

    flyGyro = Instance.new("BodyGyro")
    flyGyro.MaxTorque = Vector3.new(1e9,1e9,1e9)
    flyGyro.CFrame = hrp.CFrame
    flyGyro.P = 9e4
    flyGyro.Parent = hrp

    flyConnection = RunService.RenderStepped:Connect(function()
        if not flying or not hrp then return end
        local cam = workspace.CurrentCamera
        flyGyro.CFrame = cam.CFrame
        local dir = Vector3.zero
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then dir += cam.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then dir -= cam.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then dir -= cam.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then dir += cam.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then dir += Vector3.new(0,1,0) end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then dir -= Vector3.new(0,1,0) end
        local speed = 80
        flyVelocity.Velocity = (dir.Magnitude > 0) and dir.Unit*speed or Vector3.zero
    end)
    print("Fly started")
end

local function stopFly()
    if not flying then return end
    flying = false
    if flyConnection then flyConnection:Disconnect() flyConnection = nil end
    if flyVelocity then flyVelocity:Destroy() flyVelocity = nil end
    if flyGyro then flyGyro:Destroy() flyGyro = nil end
    local char = player.Character
    if char then
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then hum.PlatformStand = false end
    end
    print("Fly stopped")
end

local function updateSpeedJump()
    local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.WalkSpeed = 16*speedMult
        hum.JumpPower = 50*jumpMult
        print("Speed/Jump updated: WalkSpeed="..tostring(hum.WalkSpeed)..", JumpPower="..tostring(hum.JumpPower))
    end
end

-- ----------------------------
-- lighting & utility functions
-- ----------------------------
local function setFullBright(on)
    fullBright = on
    if on then
        Lighting.Ambient = Color3.new(1,1,1)
        Lighting.Brightness = 2
    else
        if not nightMode then
            Lighting.Ambient = originalAmbient
            Lighting.Brightness = originalBrightness
        end
    end
    print("FullBright set to", tostring(on))
end

local function setNightMode(on)
    nightMode = on
    if on then
        Lighting.Ambient = Color3.new(0,0,0)
        Lighting.Brightness = 0.1
    else
        if not fullBright then
            Lighting.Ambient = originalAmbient
            Lighting.Brightness = originalBrightness
        end
    end
    print("NightMode set to", tostring(on))
end

-- ----------------------------
-- auto click coroutine
-- ----------------------------
local autoClickCoroutine = nil
local function startAutoClick()
    if autoClickCoroutine then return end
    autoClickCoroutine = coroutine.create(function()
        while autoClicking do
            local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
            if tool and tool.Activate then
                pcall(function() tool:Activate() end)
            end
            task.wait(0.1)
        end
        autoClickCoroutine = nil
    end)
    coroutine.resume(autoClickCoroutine)
    print("AutoClick started")
end

local function stopAutoClick()
    autoClicking = false
    autoClickCoroutine = nil
    print("AutoClick stopped")
end

-- ----------------------------
-- infinite jump listener
-- ----------------------------
UserInputService.JumpRequest:Connect(function()
    if infiniteJump then
        local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if hum then hum:ChangeState(Enum.HumanoidStateType.Jumping) end
    end
end)

-- ----------------------------
-- noclip routine
-- ----------------------------
RunService.Stepped:Connect(function()
    local char = player.Character
    if char then
        for _, part in pairs(char:GetChildren()) do
            if part:IsA("BasePart") and part.Name~="HumanoidRootPart" then
                part.CanCollide = not noClip
            end
        end
    end
end)

-- ----------------------------
-- auto heal & stamina
-- ----------------------------
RunService.Heartbeat:Connect(function()
    if autoHeal then
        local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if hum and hum.Health<hum.MaxHealth then
            hum.Health = math.min(hum.Health+1,hum.MaxHealth)
        end
    end
end)

RunService.Heartbeat:Connect(function()
    if infiniteStamina then
        local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if hum and hum:FindFirstChild("Stamina") then
            hum.Stamina.Value = hum.Stamina.MaxValue
        end
    end
end)

player.Idled:Connect(function()
    if antiAfk then
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end
end)

-- ----------------------------
-- Utility: find target for aim assist
-- ----------------------------
local function isValidTarget(otherPlayer)
    if not otherPlayer or otherPlayer == player then return false end
    local char = otherPlayer.Character
    if not char then return false end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if not hum or hum.Health <= 0 then return false end
    local hrp = char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("UpperTorso") or char:FindFirstChild("Torso")
    if not hrp then return false end
    if aimIgnoreTeam and Teams and player.Team and otherPlayer.Team and player.Team == otherPlayer.Team then
        return false
    end
    local camPos = camera and camera.CFrame.Position or Vector3.new()
    local dist = (hrp.Position - camPos).Magnitude
    if aimMaxDistance and dist > aimMaxDistance then return false end
    return true
end

local function getClosestTargetToCursor(maxPixels)
    local best, bestDist = nil, math.huge
    if not camera then camera = workspace.CurrentCamera end
    for _, plr in pairs(Players:GetPlayers()) do
        if isValidTarget(plr) then
            local char = plr.Character
            local hrp = char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("UpperTorso") or char:FindFirstChild("Torso")
            if hrp then
                local screenPos = camera:WorldToViewportPoint(hrp.Position)
                local onScreen = screenPos.Z > 0
                if onScreen then
                    local dx = screenPos.X - mouse.X
                    local dy = screenPos.Y - mouse.Y
                    local d = math.sqrt(dx*dx + dy*dy)
                    if d < bestDist and d <= maxPixels then
                        bestDist = d
                        best = {player = plr, part = hrp, screenPos = screenPos}
                    end
                end
            end
        end
    end
    return best
end

-- ----------------------------
-- Aim assist core (smoothing camera)
-- ----------------------------
local aimConnection = nil

aimConnection = RunService.RenderStepped:Connect(function(dt)
    if not aimAssist or not isAiming then return end
    if not camera then camera = workspace.CurrentCamera end

    local candidate = getClosestTargetToCursor(aimFOV)
    if candidate and candidate.part then
        local targetPos = candidate.part.Position + Vector3.new(0, 1.5, 0)
        local camPos = camera.CFrame.Position
        local currentLook = camera.CFrame.LookVector
        local desiredDir = (targetPos - camPos).Unit

        if aimSmoothing == 0 then
            camera.CFrame = CFrame.new(camPos, camPos + desiredDir)
        else
            local alpha = math.clamp(dt * aimSmoothing, 0, 1)
            local lerpedDir = (currentLook:Lerp(desiredDir, alpha)).Unit
            camera.CFrame = CFrame.new(camPos, camPos + lerpedDir)
        end
    end
end)

-- ----------------------------
-- UI creation (keeps original structure & style)
-- ----------------------------
local gui = Instance.new("ScreenGui")
gui.Name = "CoolKidHub"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0,400,0,350) -- original size
mainFrame.Position = UDim2.new(0.5,-200,0.5,-175)
mainFrame.BackgroundColor3 = Color3.fromRGB(255,0,0)
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = gui

local function createUICorner(parent,radius)
    local c=Instance.new("UICorner")
    c.CornerRadius=UDim.new(0,radius)
    c.Parent=parent
end
createUICorner(mainFrame,12)

local header=Instance.new("Frame")
header.Size=UDim2.new(1,0,0,40)
header.BackgroundColor3=Color3.fromRGB(0,0,0)
header.Parent=mainFrame
createUICorner(header,12)

local title=Instance.new("TextLabel")
title.Size=UDim2.new(1,0,1,0)
title.BackgroundTransparency=1
title.Text="CoolKid Hub"
title.TextColor3=Color3.fromRGB(255,0,0)
title.Font=Enum.Font.Arcade
title.TextSize=24
title.Parent=header

local closeBtn=Instance.new("TextButton")
closeBtn.Size=UDim2.new(0,35,0,35)
closeBtn.Position=UDim2.new(1,-40,0,2)
closeBtn.BackgroundColor3=Color3.fromRGB(255,0,0)
closeBtn.Text="X"
closeBtn.Font=Enum.Font.Arcade
closeBtn.TextSize=20
closeBtn.TextColor3=Color3.fromRGB(255,255,255)
closeBtn.Parent=header
createUICorner(closeBtn,8)
closeBtn.MouseButton1Click:Connect(function() gui:Destroy() print("GUI closed") end)

local tabsFrame=Instance.new("Frame")
tabsFrame.Size=UDim2.new(1,0,0,30)
tabsFrame.Position=UDim2.new(0,0,0,45)
tabsFrame.BackgroundTransparency=1
tabsFrame.Parent=mainFrame

local tabContents={}

local contentFrame=Instance.new("Frame")
contentFrame.Size=UDim2.new(1,-20,1,-80) -- original content frame size
contentFrame.Position=UDim2.new(0,10,0,80)
contentFrame.BackgroundTransparency=1
contentFrame.Parent=mainFrame

local function selectTab(name)
    for t,f in pairs(tabContents) do f.Visible=(t==name) end
end

local function createTab(name,order)
    local btn=Instance.new("TextButton")
    btn.Size=UDim2.new(0,100,1,0)
    btn.Position=UDim2.new(0,(order-1)*110,0,0)
    btn.BackgroundColor3=Color3.fromRGB(0,0,0)
    btn.Text=name
    btn.Font=Enum.Font.Arcade
    btn.TextSize=20
    btn.TextColor3=Color3.new(1,1,1)
    btn.Parent=tabsFrame
    createUICorner(btn,6)

    local frame=Instance.new("Frame")
    frame.Size=UDim2.new(1,0,1,0)
    frame.BackgroundTransparency=1
    frame.Visible=false
    frame.Parent=contentFrame
    tabContents[name]=frame

    btn.MouseButton1Click:Connect(function() selectTab(name) end)
end

createTab("Main",1)
createTab("Player",2)
createTab("Utility",3)
createTab("Combat",4)  -- new combat tab
createTab("Credits",5)

-- helper: toggle (prints when changed)
local function createToggle(parent,text,state,posY,callback)
    local btn=Instance.new("TextButton")
    btn.Size=UDim2.new(0,180,0,30)
    btn.Position=UDim2.new(0,10,0,posY)
    btn.BackgroundColor3=state and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
    btn.Text=text..": "..(state and "ON" or "OFF")
    btn.Font=Enum.Font.Arcade
    btn.TextColor3=Color3.new(1,1,1)
    btn.Parent=parent
    createUICorner(btn,6)
    btn.MouseButton1Click:Connect(function()
        state=not state
        callback(state)
        btn.BackgroundColor3=state and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
        btn.Text=text..": "..(state and "ON" or "OFF")
        print(text.." set to "..tostring(state))
    end)
    return btn
end

-- helper: integer slider (used for FOV)
local function createSlider(parent,labelText,min,max,init,posY,callback)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(0,180,0,18)
    lbl.Position = UDim2.new(0,10,0,posY)
    lbl.BackgroundTransparency = 1
    lbl.Text = labelText..": "..tostring(init)
    lbl.Font = Enum.Font.Arcade
    lbl.TextSize = 16
    lbl.TextColor3 = Color3.new(1,1,1)
    lbl.Parent = parent

    local sliderBG = Instance.new("Frame")
    sliderBG.Size = UDim2.new(0,180,0,8)
    sliderBG.Position = UDim2.new(0,10,0,posY+20)
    sliderBG.BackgroundColor3 = Color3.fromRGB(30,30,30)
    sliderBG.Parent = parent
    createUICorner(sliderBG,6)

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((init-min)/(max-min),0,1,0)
    fill.BackgroundColor3 = Color3.fromRGB(255,0,0)
    fill.Parent = sliderBG
    createUICorner(fill,6)

    local dragging = false
    sliderBG.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            local abs = sliderBG.AbsolutePosition.X
            local w = sliderBG.AbsoluteSize.X
            local relative = math.clamp((mouse.X - abs) / w, 0, 1)
            local value = math.floor(min + (max-min)*relative)
            fill.Size = UDim2.new(relative,0,1,0)
            lbl.Text = labelText..": "..tostring(value)
            callback(value)
            print(labelText.." set to "..tostring(value))
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    sliderBG.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local abs = sliderBG.AbsolutePosition.X
            local w = sliderBG.AbsoluteSize.X
            local relative = math.clamp((mouse.X - abs) / w, 0, 1)
            local value = math.floor(min + (max-min)*relative)
            fill.Size = UDim2.new(relative,0,1,0)
            lbl.Text = labelText..": "..tostring(value)
            callback(value)
        end
    end)
    return {label = lbl, slider = sliderBG, fill = fill}
end

local function createSliderFloat(parent,labelText,min,max,init,posY,callback)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(0,180,0,18)
    lbl.Position = UDim2.new(0,10,0,posY)
    lbl.BackgroundTransparency = 1
    lbl.Text = labelText..": "..string.format("%.1f", init)
    lbl.Font = Enum.Font.Arcade
    lbl.TextSize = 16
    lbl.TextColor3 = Color3.new(1,1,1)
    lbl.Parent = parent

    local sliderBG = Instance.new("Frame")
    sliderBG.Size = UDim2.new(0,180,0,8)
    sliderBG.Position = UDim2.new(0,10,0,posY+20)
    sliderBG.BackgroundColor3 = Color3.fromRGB(30,30,30)
    sliderBG.Parent = parent
    createUICorner(sliderBG,6)

    local fill = Instance.new("Frame")
    local relativeInit = (init - min) / (max - min)
    fill.Size = UDim2.new(relativeInit,0,1,0)
    fill.BackgroundColor3 = Color3.fromRGB(255,0,0)
    fill.Parent = sliderBG
    createUICorner(fill,6)

    local dragging = false
    sliderBG.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            local abs = sliderBG.AbsolutePosition.X
            local w = sliderBG.AbsoluteSize.X
            local relative = math.clamp((mouse.X - abs) / w, 0, 1)
            local value = min + (max-min)*relative
            fill.Size = UDim2.new(relative,0,1,0)
            lbl.Text = labelText..": "..string.format("%.1f", value)
            callback(value)
            print(labelText.." set to "..string.format("%.1f", value))
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    sliderBG.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local abs = sliderBG.AbsolutePosition.X
            local w = sliderBG.AbsoluteSize.X
            local relative = math.clamp((mouse.X - abs) / w, 0, 1)
            local value = min + (max-min)*relative
            fill.Size = UDim2.new(relative,0,1,0)
            lbl.Text = labelText..": "..string.format("%.1f", value)
            callback(value)
        end
    end)
    return {label = lbl, slider = sliderBG, fill = fill}
end


local mainTab = tabContents["Main"]
createToggle(mainTab,"Fly",flying,10,function(v) if v then startFly() else stopFly() end end)

local playerTab = tabContents["Player"]
createToggle(playerTab,"Infinite Jump",infiniteJump,10,function(v) infiniteJump=v end)
createToggle(playerTab,"NoClip",noClip,50,function(v) noClip=v end)
createToggle(playerTab,"Auto Heal",autoHeal,90,function(v) autoHeal=v end)
createToggle(playerTab,"Infinite Stamina",infiniteStamina,130,function(v) infiniteStamina=v end)

local utilTab = tabContents["Utility"]
createToggle(utilTab,"FullBright",fullBright,10,setFullBright)
createToggle(utilTab,"Night Mode",nightMode,50,setNightMode)
createToggle(utilTab,"AutoClick",autoClicking,90,function(v) autoClicking=v if v then startAutoClick() else stopAutoClick() end end)
createToggle(utilTab,"Anti AFK",antiAfk,130,function(v) antiAfk=v end)

-- Combat tab (new)
local combatTab = tabContents["Combat"]
createToggle(combatTab,"Aim Assist",aimAssist,10,function(v) aimAssist = v end)

-- keybind display button (click to rebind)
local keybindLabel = Instance.new("TextButton")
keybindLabel.Size = UDim2.new(0,180,0,30)
keybindLabel.Position = UDim2.new(0,10,0,50)
keybindLabel.BackgroundColor3 = Color3.fromRGB(0,0,0)
keybindLabel.Text = "Aim Key: Right Mouse"
keybindLabel.Font = Enum.Font.Arcade
keybindLabel.TextColor3 = Color3.new(1,1,1)
keybindLabel.Parent = combatTab
createUICorner(keybindLabel,6)

local rebinding = false
keybindLabel.MouseButton1Click:Connect(function()
    keybindLabel.Text = "Press key..."
    rebinding = true
    local conn
    conn = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        rebinding = false
        conn:Disconnect()
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
            aimKey = input.UserInputType
            keybindLabel.Text = "Aim Key: "..(input.UserInputType == Enum.UserInputType.MouseButton2 and "Right Mouse" or "Left Mouse")
            print("Aim key bound to mouse button")
        elseif input.KeyCode then
            aimKey = input.KeyCode
            keybindLabel.Text = "Aim Key: "..tostring(input.KeyCode):gsub("Enum.KeyCode.","")
            print("Aim key bound to "..tostring(input.KeyCode))
        else
            keybindLabel.Text = "Aim Key: Right Mouse"
        end
    end)
end)


local fovSlider = createSlider(combatTab, "FOV px", 20, 600, aimFOV, 100, function(val)
    aimFOV = val
end)

-- smoothing slider (float, one decimal precision)
local smoothSlider = createSliderFloat(combatTab, "Smoothing", 0, 20, aimSmoothing, 170, function(val)
    aimSmoothing = val
end)

-- ignore-team toggle
createToggle(combatTab,"Ignore Same Team",aimIgnoreTeam,240,function(v) aimIgnoreTeam = v end)

-- Credits tab
local credTab = tabContents["Credits"]
local credits = Instance.new("TextLabel")
credits.Size=UDim2.new(1,0,0,50)
credits.Text="Probug1vr - Youtube"
credits.TextColor3=Color3.new(1,1,1)
credits.Font=Enum.Font.Arcade
credits.TextSize=24
credits.BackgroundTransparency=1
credits.Parent=credTab

-- select default tab
selectTab("Main")


print("cool kid gui")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if typeof(aimKey) == "EnumItem" then
        if input.UserInputType == aimKey or input.KeyCode == aimKey then
            isAiming = true
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if typeof(aimKey) == "EnumItem" then
        if input.UserInputType == aimKey or input.KeyCode == aimKey then
            isAiming = false
        end
    end
end)

UserInputService.WindowFocusReleased:Connect(function()
    isAiming = false
end)

-- Keep camera reference up to date (in case of respawn)
RunService.RenderStepped:Connect(function()
    camera = workspace.CurrentCamera
end)

-- cleanup on close (if needed)
game:BindToClose(function()
    -- nothing special
end)
